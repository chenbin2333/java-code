day010-extends继承-笔记

1. 继承（extends）（掌握）
	1. 概念：子类通过extends关键字可以继承父类中除了构造方法之外的所有
		类中的成员
	2. 作用：代码复用，简化代码，提高开发效率
	3. 语法使用：（掌握）
			1. 先设计父类：【保存共性：共有成员变量、共有方法等】
				public class Xxx{
					成员变量;
					构造方法;
					普通方法：
						1. static修饰的
						2. 非static修饰的
				} 
				
			2. 再设计子类继承父类：【保存特性：特有成员变量、特有方法等】
				public class Xxx extends Xxx(父类名) {
					成员变量;
					构造方法;
					普通方法：
						1. static修饰的
						2. 非static修饰的
				} 
			
	4. 可以从父类继承哪些成员：（掌握）
		除了构造方法之外所有成员都可以继承。
		但是private修饰的成员，必须通过间接（其他public、protected修饰的方法）方式访问。
		
	5. 特点：（掌握）
		1. 单继承
		2. 多重继承：
			例如：
			class A{}
			class B extends A{}
			class C extends B{}
			class D extends C{}
			
			C类会继承A、B 和Object类中的成员
			D类会继承A、B、C 和Object类中的成员
		3. 隐式继承Object
		4. 相关称呼：
			父类、基类、超类、根类
			子类、派生类、拓展类
			父类：存放的都是共有的代码，共性
			子类：存放的独有的代码，特性
	
	
2. 方法的重写（@Override注解，表示子类重写了父类中继承过来的方法）：（重点）
	回顾方法重载Overload：
	必须是父子关系
	
	1. 概念：为了保证现实开发中业务的合理性，根据需求将父类继承过来的部分方法，
		重写方法体，就是方法重写
		【方法名和形参列表跟父类都是完全一致】	
			
	2. 作用：保证业务合理
	
	3. 使用：（掌握）
		语法：
		方法重写：复制粘贴父类方法，到子类中，重写方法体即可（可以在子类中：写方法的首字母  alt+/ 回车）
			
		--------------------------以下知道即可------------------------------
			1)重写只能出现在继承关系之中。当一个类继承它的父类方法时,都有机会重写该父类的方法。
			前提是父类的方法没有被final（中文意思：最终的，以后讲）修饰
			2)子类方法和父类方法的方法签名(方法名+参数列表)完全一致;
			3)访问权限 : 子类方法的访问权限 大于等于父类方法的访问权限
			4)static/private 方法不能够被重写 （java语法）
			5)返回值类型 : 子类方法的返回值类型可以是父类方法的返回值类型的子类或者相等	            
			6)子类抛出的异常（Exception）下是父类相应方法抛出的异常子类或者相等	【非运行时异常】
			
	4. 注意事项：
		4.1 并不是从父类继承过来的所有方法都要重写，有可能只是重写部分方法
		4.2 并不是每一个子类都要重写父类继承过来的方法

	
3. 	super(超级)(理解)
	1. 回顾this，指代当前对象。只要解决了成员变量和局部变量的二义性。构造方法相互调用
		调用成员变量：this.成员变量
		调用普通非static方法：this.方法名(...);
		调用构造方法：this(...);必须在构造方法第一行
		
		this就是需要在当前类中使用  当前类  的成员【成员变量、方法、构造方法】
		super就是需要在当前类中使用  父类  的成员【成员变量、方法、构造方法】
		
		继承是在创建子类对象后，可以访问父类继承过来的成员。
		super是在设计子类的过程中，访问父类成员。
		
	2. 概念：指代父类对象。
	3. 作用：在子类设计的过程中可以访问父类中的成员【方法、成员变量、构造方法】
	4. 使用：
		调用父类成员变量：super.成员变量
		调用父类普通非static方法：super.方法名(...);
		调用父类构造方法：super(...);必须在子类构造方法第一行
					this(...);必须在当前类构造方法第一行
	5. 	注意事项：
			1. super(...)和this(...) 不能共存,因为都需要在构造方法第一行
			2. 每一个子类中的构造方法中都会有一个默认super() 调用父类的无参数构造方法
				(默认只会调用无参数的构造方法);
			        如果有显示调用父类的构造方法,那么默认调用就不存在了;
				所以，一般设计类都要提供一个无参构造，扩展性强
				
	6. super的使用和继承的区别与联系：
		1. super使用前提必须是继承
		2. 继承测试是在测试类中创建子类对象，通过子类对象调用父类继承的成员			
		3. super测试是设计子类过程中 需要在子类中调用父类成员，通过super完成			
				
				
4. 抽象方法 abstract 方法（重点）
	1. 概念：就是没有任何方法体，且用abstract修饰的方法，()后用分号。
	2. 语法：
			修饰符 abstract 返回值类型 方法名(...); 

	3. 作用：从语法层面强制所有的子类重写该方法，保证业务逻辑的合理性
		
5.  抽象类 abstract修饰的类（重点）
	1. 概念：抽象类 abstract修饰的类，是一种新结构。
	2. 抽象类作用：就是用来装抽象方法的。
	3. 语法：（重点）
		命名一般类名AbstractXxx 【抽象类可以只写普通方法，但是毫无意义】
	 		修饰符 abstract class AbstractXxx{
			 		实例变量【非static修饰的成员变量】
			 		类变量【static修饰的成员变量】
			 		实例方法【非static修饰的成员方法】
			 		类方法【static修饰的成员方法】
			 		构造方法  // 语法规定：抽象类不能创建对象。只能在子类中通过super使用
					抽象方法：修饰符 abstract 返回值类型 方法名(...);
			}
	4. 抽象类的使用场景： 【理解】
		1. 一般作为业务父类（基类，模板类）
		2. 需要所有子类强制重写方法。例如，模板方法模式。
				
	5. 注意事项：【了解】
		1. 语法规定：抽象类不能创建对象。不能new 对象。
			
6. Object类中的方法（重点、难点）
	1. int hashCode() 返回对象的哈希码值。  作用在数据结构的时候讲
 
 	2. String toString() 返回对象的字符串表示形式。如果需要打印对象的指定格式，
 		则需要重写当前对象所对应类的toString方法即可。
 		例如：打印Student对象为指定格式，则要重写 Student类的toString方法
 		
 	3. boolean equals(Object obj) 根据实际业务，判断两个对象成员变量的值是否相等，
				不是直接判断==【就是比较成员变量的值是否相等】
	 		判断当前对象和obj参数成员变量的值是否相等
	 		以后比较引用类型调用equals方法比较
	 		
	 		通过快捷键：alt + shift + s 选择hashCode和equals生成选项，在弹出的窗口中，勾选比较的成员变量OK即可
 		例如：
 			两个学生Student对象，我们认为姓名和电话号码相同就是同一个人，就用重写Student学生类的equals方法
 			两个教师Teacher对象，我们认为身份证号相同就是同一个人，就用重写Teacher教师类的equals方法
 			    
 	4. Class getClass() 即当前对象所对应的字节码文件   （反射最常用）
	 		字节码文件用==比较（了解）
	 		 Class类是 字节码文件类型 
	 		 例如： 
	 		 	user对象调用getClass()获取的是user对象的字节码文件 User类


	
	