day009-potting封装 笔记

1. 匿名对象：（了解）
 		就是创建对象的时候，没有使用变量保存其堆中的地址。
 		例如：new _03User();//这就是一个匿名对象
 
 	使用场景：
 		只能在创建的时候直接使用，并且只能使用1次。
 		例如：线程.启动start();
 			new Thread().start();
 
	作用：
 		可以节约资源，因为GC会不定时回收匿名对象。
 		
 2. 包 package
 	1. 概念：简单的理解就是一个文件夹
 	2. 作用：
 		1. 方便管理项目中的java代码
 		2. 可以避免类名冲突。
 		
 	3. 使用：(掌握)
 		1. 声明包语法：
			一般是公司域名反写.项目名.模块名字.子模块名
			包名是全英文，小写的
			例如 ： itsource.cn 域名
			package  cn.itsource.erp.oa.domain;自动化办公
			package  cn.itsource.erp.sa.entity; 系统管理
			注意：不要写成nc.
			
			
		2. 导入包语法：即使用别人写好的类
			语法：
				import 全限定包名.类名; 现在统统用快捷键： ctrl + shift + O
			例如:
				使用Arrays类
				import java.util.Arrays;
				
			特殊导包：在一个类中会用到同名不同包的类的时候必须使用全限定路径	
				例如：同时使用java.util.Date和java.sql.Date
			
			
	4. 注意事项：	
		1.	导入包的代码应该在声明包（就是该类所在的包）的后面，声明类的前面
		2.	import java.util.*;  表示导入本包中所有会使用到的，util包中的类；
			只会导入util包下面直接的类型，不包括util包的子包中的类型
    	3.	java.lang是核心包，下面的直接类型是自动导入的；
			例如：String、System类
    		lang包的子包中的类型不会自动导入，需要手动导入
    		
   		
		
	5.  java/ javax(java增强包)
      	java.lang (java的核心包--基本包)
      	java.util(java的工具包 --集合框架ArrayList LinkedList)
        java.io(java IO包input-output 读写文件)
        java.net(网络编程) 
       	java.awt/javax.swing（java的图形化界面）坦克大战、打灰机、记事本、画图工具
		java.math 数学相关的包
		java.sql  数据库相关的包
		java.text 是文本格式化相关的包
		java.time 时间相关的包	
 			
*************************************	重点	 ******************************************		
3. 	封装：
		3.1. 概念，就是通过访问权限修饰符修饰 类或者类中的成员，而达到保护内部成员安全的目的，就是封装。
 			访问权限修饰符：控制访问范围
 				public		公共的，最大权限，被其修饰的成员，在任意包下、类中，都可以访问到 (所有类)
 				protected	受保护的，在同包类和子类中都可以访问
 				默认不写		只能在同包类中访问
 				private		私有化的，被其修饰的成员，只能在当前类中访问
 
 		3.2. 封装作用：
 			1. 保护内部数据
 		
 		3.3. 使用场景：
 			1. 不希望在业务类外部，随意访问、修改业务类类中的成员变量
 			2. 达到权限要求的才能访问。
 			3. 只需要获取数据的时候，例如 单例模式
 
 		3.4. 封装步骤：（重点）
 			 1. 私有化成员变量（用private修饰成员变量）
 			 2. 为每一个成员变量提供合理的		
 					返回值类型 getXxx()方法	获取成员变量的值，如果当前成员变量类型是boolean类型，将getXxx()改为 isXxx()
 					
 					void setXxx(...)方法	设置成员变量的值
 			 3. 提供一个无参构造
 			 4. 该类用public修饰
 
 		3.5. 小结：
 			对象赋值的方式：(掌握)
 				1. 有参构造 :new 类名(...);
 				2. 对象名.setXxx(...);
 				3. 对象名.成员变量 = 值;// 封装后不能用
 				一般配合使用，如果成员变量比较少，可以直接用有参构造
 				如果成员变量比较多，一般用无参构造+setXxx(...)
 				如果对象已经创建，需要修改值，用setXxx(...)
 		
 			对象取值的方式：(掌握)
 				1. 对象名.getXxx(); / 对象名.isXxx()
 				2. 对象名.成员变量 ;// 封装后不能用
 				
 		6. 注意事项：(了解)
 			1. 不是只有private才叫封装，private只是最大限度的封装而已。
 			2. get和set方法都是只能获取或者赋值一个成员变量
 				
 			3. 单一职能原则：功能最小化,不要想着一个方法写完所有的功能 .代码复用率高

 4. this 这个（难点、理解）
 	如果有同学不懂this,不用管this是什么，主要设计类的时候，当成语法，用在用参构造和setXxx方法中即可

	4.1. 概念： this指代当前对象，即，哪个对象调用就指代哪个对象
	4.2. 作用和使用：
		4.2.1	解决局部变量和成员变量的二义性
			例如：
			public Account(String name) {
				//在方法中使用变量的时候，优先从局部范围找，就近原则
				//这里因为成员变量和局部变量名字相同，存在二义性问题
				//要解决二义性问题，就需要用到this,加上this，就会直接从成员变量位置找name
				this.name = name;
			}
			
		4.2.2	本类中构造方法之间的相互调用，但是必须是构造方法内的第一句		this调用构造方法不会创建新对象
			语法：this(...); 调用本类中的另一个构造方法，并不会创建额外的对象，会根据参数自动匹配调用对应的构造方法
			
				作用：
					1.可以创建对象的时候，给定某些成员变量默认值
					2.可以复用其它构造方法，简化给成员变量赋值的代码
			例如：
			//1.可以创建对象的时候，给定某些成员变量默认值
			public Account(String name) {
				//name和111111都是String类型，只不过name是一个变量，而111111是一个写死的值
				//并通过该构造方法创建的对象都有相同的   【默认密码】
				this(name,"111111");//必须是构造方法内的第一句,这里调用的是有两个String参数的构造方法
			}
			
			public Account(String name,String pwd) {
				//要解决二义性问题，就需要用到this,加上this，就会直接从成员变量位置找name
				this.name = name;
				this.pwd = pwd;
			}
			
			//2.可以复用其它构造方法，简化给成员变量赋值的代码
			public Account(String name,String pwd,double money) {
				/*
				this.name = name;
				this.pwd = pwd;
				可以使用下面的方式，this(...)简化代码
				*/
				this(name,pwd);//复用上面的有两个String参数的构造方法，简化代码作用
				this.money = money;
			}
			
		-------------------下面使用作为了解---------------------------------
		
		4.2.3	作为返回值返回  ： this持有对象地址，表示该类的一个对象即是一个数据
		
		4.2.4	调用方法的时候，作为实际参数使用
		
		4.2.5	在当前类中调用方法：
					this.getName();
		
		
	4.3. 注意事项：
		4.3.1 this是设计类的时候使用，每一个对象中都会有一个自己的this		
		
******************************************* 非常重要 *************************************************		
5. 设计类总结：
			
	1. 设计类，业务类，没有main方法	
		语法：
		/**
		 * 类的解释说明
		 */
		public class Xxx {//大驼峰、见名知意
			/** 成员变量描述 */
			private 成员变量;
			
			/**
			 * 无参构造描述
			 */
			修饰符 构造方法名(){
				无参构造方法体
			}
			
			/**
			 * 有参构造描述(根据需求确定是否要写)
			 */
			修饰符 构造方法名(...){
				// 用this构造方法相互调用（1. 简化代码  2. 可以给定成员变量默认值）  必须是构造方法第一行
				this(...);// ... 是实参
				
				// 用this解决成员变量和局部变量二义性
				this.xxx = xxx;
			}
			
			/**
			 * getXxx方法描述 取值
			 	如果是boolean类型，将getXxx()改为isXxx();
			 */
			public 返回值类型 getXxx(){
				return xxx;
			} 
			
			/**
			 * setXxx方法描述	赋值
			 */
			public void setXxx(...){
				// 用this解决成员变量和局部变量二义性
				this.xxx = xxx;
			} 
			
		}
			
		要求：
			1.类名，大驼峰，见名知意，不能以jdk中存在的类命名
			2.成员变量名和方法名，小驼峰，见名知意
			3.在类名、方法名、成员变量名上面写文档注释
				类名：多行的文档注释
				方法名：多行的文档注释
				成员变量名：单行的文档注释
		
		例如：
			参考thisdemo3中案例
		
			
	2. 设计一个测试类，测试类命名，XxxTest，包含main方法
		在测试类的main方法中，写以下代码：	
	
			2.1. 创建对象：
				语法：
					类名 对象名（变量） = new 类名();//调用无参构造
					类名 对象名（变量） = new 类名(...);//调用有参构造，在创建的时候直接给对象的成员变量赋值了
				
				例如：
					Student stu = new Student();//调用Student类的无参构造
					Student stu2 = new Student("小吕",23);//调用Student类的有参构造，	值和成员变量数据类型必须完全一致
				
			2.2. 给对象成员变量赋值	
				语法：	
					对象名.setXxx(...) = 值;//注意：值和成员变量数据类型必须完全一致
				
				例如：
					stu.setName = "小洁洁";//name是String类型
					stu.setAge = 22;//age是int类型
					
					
			2.3. 对象的取值/调用方法:	在这里，只需要打印输出一下，看一下结果即可
				语法：
					返回值 对象名.getXxx();
					
				例如：
					String name = stu.getName();
					System.out.println(name);//打印获取的成员变量
 
 
 
 
 