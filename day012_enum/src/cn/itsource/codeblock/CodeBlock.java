package cn.itsource.codeblock;

/**
 * 代码块：（了解）
	1. 概念：简单的认为就是一对大括号 {}
	2. 特点： 作用域问题
	3. 代码块分类：
		3.1 静态代码块 【偶尔会用】
			作用：
				1.批量将成员变量初始化
				2.在预加载的时候调用方法，或者，做条件判断
			
			语法：直接声明在类中，并且前面有static修饰
			class Xxx{
				// 静态代码块
				static {
					// 一般写一些初始化操作，例如，加载驱动
					// 类加载的时候执行，执行一次
				}
			}	

		3.2 构造代码块 （一般不用）【了解】
			语法：直接声明在类中，并且前面没有static修饰
			作用：如果多个构造方法都需要执行相同的代码，就可以写在构造代码块中
			class Xxx{
				//构造代码块
				{
					//会在创建的对象的时候，将该构造代码块中的内容复制到
					构造方法中，在super()下面
					每次创建对象都会执行一次
				}
			}	
			
		3.3 普通代码块 （基本不用，用的时候配合if或者循环使用）(了解)
			在方法中写一个{}，基本不用，用的时候配合if或者循环使用
		
		
	4. 执行流程：(了解)
			从静态代码块开始执行，然后是构造代码块，然后是构造方法
			
	5. 有继承关系的代码块执行流程：(了解)
		从最高父类的静态代码块开始加载，然后逐级向下加载，直到加载到
		当前类的静态代码块结束。再从最高父类的构造代码块开始执行，然后是构造方法，
		然后逐级向下执行，直到执行到当前类的构造代码块、构造方法结束。
 */
public class CodeBlock {

	static {// 静态代码块
		/*
		 * 语法：直接声明在类中，并且前面有static修饰
			static {
				// 一般写一些初始化操作，例如，加载驱动
				// 类加载的时候执行，执行一次
			}
		 */
		System.out.println("静态代码块=========>");
	}
	
	{// 构造代码块
		/*
		 * 3.2 构造代码块 （一般不用）【了解】
			语法：直接声明在类中，并且前面没有static修饰
		 */
		System.out.println("构造代码块.....");
	}
	
	/**
	 * 无参构造
	 */
	public CodeBlock() {
		super();
		// 构造代码块代码出现的位置：System.out.println("构造代码块.....");
		System.out.println("无参构造");
	}
	/**
	 * 有参构造
	 */
	public CodeBlock(int a) {
		super();
		// 构造代码块代码出现的位置：System.out.println("构造代码块.....");
		System.out.println("有参构造");
	}
	
	public static void main(String[] args) {
		// 创建对象
		new CodeBlock();
		new CodeBlock(1);
		
		{// 普通代码块，没有人用，除非抽风
			int a = 1;
		}
//		System.out.println(a);// 访问不到，出了作用域范围
		
	}

}
