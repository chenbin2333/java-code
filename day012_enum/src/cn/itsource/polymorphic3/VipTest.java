package cn.itsource.polymorphic3;

public class VipTest {

	public static void main(String[] args) {
		/*
		 * 账户管理系统，账户登录，登录后，显示当前账户的会员等级【每一个账户都会展示；每一个账户等级有可能是不一样的】
		 * AbstractVip类，是所有会员的父类，有一个方法 show(),因为每个账户等级都是不同的，所以要强制重写;显示会员等级
		 * 3个子类：
		 * 	Vip1 1~9级
		 * 		特权方法：low()
		 * 	Vip2 10~19级
		 * 		特权方法: normal()
		 * 	Vip3 20~29级
		 * 		特权方法: great()
		 */
		// 思考，我们是否可以确定会员登录之前是什么等级的？不能
		// 会员登录，我们创建一个会员对象表示
		// 模拟一个会员等级是Vip1的登录进来
		AbstractVip v = new Vip1();// 必须用多态的方式创建Vip1对象。向上造型
		
		// 调用show方法，显示对应等级的级别
		v.show();// 会执行对应子类Vip1重写后的show方法
		
		// 因为我们不确定，未来父类变量v中装的是哪一个子类对象，所以，必须在强制转换之前，进行类型判断，看一下变量v中究竟是装的哪一种子类对象
		// 调用Vip1特有方法low
//		Vip2 v5 = (Vip2)v;// 如果强制转换之前不做类型判断的话，会发生：ClassCastException类造型异常
		
		/*
		 * 3.2 向下造型 => 就是强制类型转换
			强制类型转换语法：
				子类类型 变量 =（子类类型）父类变量/父类类型值;
			
			因为不能确定父类变量vip中装的是哪一个子类对象，所以应该先进行类型判断
		 	确定对应的类型后，再进行强制转换：
		 	
		 	类型判断语法1 ：
		 		if(父类变量名 instanceof 子类类型1){
		 			// 强制转换
		 			子类类型1 子类变量 =（子类类型1）父类变量/父类类型值;
		 			
		 			//调用子类特有方法
		 			子类变量.特有方法(...);
		 		} else if(父类变量名 instanceof 子类类型2){
		 			// 强制转换
		 			子类类型2 子类变量 =（子类类型2）父类变量/父类类型值;
		 			// 调用子类特有方法
		 			子类变量.特有方法(...);
		 		}...
		 */
		System.out.println("====================	类型判断语法1  ： ===========================");
		if (v instanceof Vip1) {// 判断父类变量v中是否装的是Vip1的对象，如果是则强转
			// 强制转换语法： 子类类型1 子类变量 =（子类类型1）父类变量/父类类型值;
			Vip1 v1 = (Vip1)v;
			// v1调用子类Vip中特有方法：low()
			v1.low();
		} else if (v instanceof Vip2) {// 判断父类变量v中是否装的是Vip2的对象，如果是则强转
			// 强制转换语法： 子类类型2 子类变量 =（子类类型2）父类变量/父类类型值;
			Vip2 v2 = (Vip2)v;
			// v2调用子类Vip中特有方法：normal()
			v2.normal();
		} else if (v instanceof Vip3) {// 判断父类变量v中是否装的是Vip3的对象，如果是则强转
			// 强制转换语法： 子类类型3 子类变量 =（子类类型3）父类变量/父类类型值;
			Vip3 v3 = (Vip3)v;
			// v3调用子类Vip中特有方法：great()
			v3.great();
		}			
		
		System.out.println("====================	类型判断语法2 ： ===========================");
		/*
		 * 类型判断语法2 ：
		 		if(父类变量名.getClass() == 子类类型1.class){
		 			// 强制转换
		 			子类类型1 变量 = (子类类型1)父类变量/父类类型值;
		 			
		 			// 调用子类特有方法
		 			子类变量.特有方法(...);
		 		} else if(父类变量名.getClass() == 子类类型2.class){
		 			// 强制转换
		 			子类类型2 变量 = (子类类型2)父类变量/父类类型值;
		 			
		 			// 调用子类特有方法
		 			子类变量.特有方法(...);
		 		}...
		 */
		if (v.getClass() == Vip1.class) {// 判断父类变量v中是否是Vip1的字节码类型，如果是则强转
			// 强制转换语法： 子类类型1 子类变量 =（子类类型1）父类变量/父类类型值;
			Vip1 v1 = (Vip1)v;
			// v1调用子类Vip中特有方法：low()
			v1.low();
		} else if (v.getClass() == Vip2.class) {// 判断父类变量v中是否是Vip2的字节码类型，如果是则强转
			// 强制转换语法： 子类类型2 子类变量 =（子类类型2）父类变量/父类类型值;
			Vip2 v2 = (Vip2)v;
			// v2调用子类Vip中特有方法：normal()
			v2.normal();
		} else if (v.getClass() == Vip3.class) {// 判断父类变量v中是否是Vip3的字节码类型，如果是则强转
			// 强制转换语法： 子类类型3 子类变量 =（子类类型3）父类变量/父类类型值;
			Vip3 v3 = (Vip3)v;
			// v3调用子类Vip中特有方法：great()
			v3.great();
		}	
		
	}

}
