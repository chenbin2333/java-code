package cn.itsource.codeblock3;

/**
 *	5. 代码块：（了解）
	1. 概念：简单的认为就是一对大括号 {} 
	2. 特点： 作用域问题
	3. 代码块分类：
		3.1 静态代码块 （偶尔会用）
			语法：直接声明在类中，并且前面有static修饰
			class Xxx{
				//静态代码块
				static {
					//一般写一些初始化操作，例如，加载驱动
					//类加载的时候执行，执行一次
				}
			}	

		3.2 构造代码块 （一般不用）(了解)
			语法：直接声明在类中，并且前面没有static修饰
			class Xxx{
				//构造代码块
				{
					//会在创建的对象的时候，将该构造代码块中的内容复制到
					构造方法中，在super()下面
					每次创建对象都会执行一次
				}
			}	
			
		3.3 普通代码块 （基本不用，用的时候配合if或者循环使用）(了解)
			在方法中写一个{}，基本不用，用的时候配合if或者循环使用
		
		
	4. 执行流程：(了解)
			从静态代码块开始执行，然后是构造代码块，然后是构造方法
			
	5. 有继承关系的代码块执行流程：(了解)
		从最高父类的静态代码块开始加载，然后逐级向下加载，直到加载到
		当前类的静态代码块结束。再从最高父类的构造代码块开始执行，然后是构造方法，
		然后逐级向下执行，直到执行到当前类的构造代码块、构造方法结束。		
 */
public class CodeBlock {
	static {// 3.1 静态代码块，偶尔会用
		// 一般写一些初始化操作，例如，加载驱动
		// 类加载的时候执行，执行一次。可以写一切初始化需要执行的代码。比如：循环、判断
		System.out.println("静态代码块...");
	}
	
	{// 3.2 构造代码块 （一般不用）(了解)
		System.out.println(" 构造代码块...");
	}
	
	/**
	 * 构造方法
	 */
	public CodeBlock() {
		// 3.2 构造代码块 中内容，会自动生成到构造方法除了this()/super() 的第一行 
//		super();// 隐式的super
//		System.out.println(" 构造代码块...");
		System.out.println("构造方法");
	}
	
	public static void main(String[] args) {
		/*
		 * 3.3 普通代码块 （基本不用，用的时候配合if或者循环使用）(了解)
			在方法中写一个{}，基本不用，用的时候配合if或者循环使用
		 */
		{// 普通代码块【不用】
			int a = 2;
		}
//		System.out.println(a);// 因为a作用域为是到{}结束，出了作用域范围了
		// 静态代码块 执行一次，构造代码块执行2次
		new CodeBlock();
		new CodeBlock();
	}

}
