package day005_while_array;

/**
 *	1. 循环结构：（掌握）
		概念：就是重复的干一件事
		1. 循环结构，就是重复的干一件事，可以复用代码
		2. 分类：
			条件循环
			死循环【很少使用】
			
		1.1. 先判断，满足条件再干	（掌握）
			while(条件判断) {
				循环体（重复干的事）
			}
			
			 * while执行流程：
			 * 	第1次：1. 初始化条件语句 => 2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第2次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第3次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	...
			 *	最后1次： 2.条件判断语句 
			
		1.2. 先干一次，再判断，满足条件再干	预执行一次	（掌握）
			do {
				循环体（重复干的事）
			} while(条件判断);//注意分号
			
			 * do while执行流程：
			 * 	第1次：1. 初始化条件语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第2次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第3次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	...
			 *	最后1次： 2.条件判断语句 
			例如：
				扫雷、获取连接数据库、远程控制、坦克大战、打飞机游戏
			
		1.3 for循环，可以简单的认为就是while循环的简写	（重点）
			for(1.初始化条件语句;	2.条件判断语句;	4. 循环控制语句){
				3. 循环体
			}
			
			执行流程：（重点）
				第1次：1. 初始化条件语句 => 2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
		 		第2次：2. 条件判断语句 => 3. 循环体 => 4. 循环控制语句
		  		第3次：2. 条件判断语句 => 3. 循环体 => 4. 循环控制语句
		  		...
		 		最后1次： 2.条件判断语句 
				
		1.4 循环注意事项测试：（了解）
			1. while(false){}语法错误
			2. 死循环后面不能紧跟任何代码
				while(true){}
				for(){}
			
			3. while(条件判断);可以不写循环体
			4. for循环
				4.1 for(){}中的条件都可以拿到外部，且可以不写{}
				4.2 for(){}死循环是第二个条件判断不写，就是死循环
				4.3 for(); 可以不写循环体
			
		1.5 使用场景：	（掌握）
			不知道循环次数一般用 while，知道循环次数一般用 for，需要预执行一次的用do{}while();
			
			例如：获取连接数据库、远程控制、坦克大战、打飞机游戏
 */
public class _01While {

	public static void main(String[] args) {
		// 需求1：请打印10句，要么干死Java，要么被Java干死！
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
//		System.out.println("要么干死Java，要么被Java干死！");
		
		// 需求2：请打印1314句，要么干死Java，要么被Java干死！
//		System.out.println("要么干死Java，要么被Java干死！");
		/*
		 * 用循环优化代码
		 * 1.1. 先判断，满足条件再干	（掌握）
			while(条件判断) {
				循环体（重复干的事）
			}
			
			 * while执行流程：
			 * 	第1次：1. 初始化条件语句 => 2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第2次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第3次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	...
			 *	最后1次： 2.条件判断语句 
		 */
//		int count = 1;// 声明一个int类型变量count赋值1，记录循环次数。【 1. 初始化条件语句】
//		while (count <= 10) {// 循环条件判断，判断次数是否<=10 【2.条件判断语句 】
//			System.out.println("要么干死Java，要么被Java干死！: " + count);// 3. 循环体【循环干的事】
//			count++;// 每循环一次，次数+1【4. 循环控制语句】
//		}
		
		/*
		 * 用do while优化代码
		 * 1.2. 先干一次，再判断，满足条件再干	预执行一次	（掌握）
			do {
				循环体（重复干的事）
			} while(条件判断);//注意分号
			
			 * do while执行流程：
			 * 	第1次：1. 初始化条件语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第2次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第3次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	...
			 *	最后1次： 2.条件判断语句 
			例如：
				扫雷、获取连接数据库、远程控制、坦克大战、打飞机游戏
		 */
		int count2 = 1;// 声明一个int类型变量count1赋值1，记录循环次数。【 1. 初始化条件语句】
		do {
			System.out.println("要么干死Java，要么被Java干死！ : " + count2);// 3. 循环体【循环干的事】
			count2++;// 每循环一次，次数+1【4. 循环控制语句】
		} while (count2 <= 10);// 循环条件判断，判断次数是否<=10 【2.条件判断语句 】
		
	}

}
