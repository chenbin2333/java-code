1. 数组：
	1. 概念：就是一堆盒子，同一时间，可以保存多个 相同 数据类型的数据
	2. 作用：可以解决同时保存多个数据的问题
	3. 使用：		
		3.1 数组声明：
			1. 动态创建：
				语法：数据类型[] 数组名 = new 数据类型[长度];//长度不能为负数，且是int类型 最大就是int最大值2147483647
				
			2. 静态创建：
				语法：数据类型[] 数组名 = {值1, 值2, 值3.....};//最常用
				
				
				语法：数据类型[] 数组名 = new 数据类型[]{值1,值2,值3.....};//不常用。了解即可
				
			怎么选择用动态创建还是静态创建？
				根据实际情况确定，知道具体的数据，用静态创建，不知道用动态创建
				
		3.2 数组赋值：
			语法：
				下标、索引、角标都是同一回事
				数组名[下标] = 值;
		
		3.3 数组取值：
			语法：
				数组名[下标];
				取出来：1. 打印输出 2.比较大小 3.计算 4.赋值给其他变量 5.作为方法的参数使用
				
		3.4 数组遍历：
			遍历：就是将数组中每一个元素取出来
				方式1：
					普通for循环	可以将数组元素重新赋值
					
				方式2： 简化遍历数组的过程
				 * 2. 增强for循环: foreach		不能将数组元素重新赋值，因为赋值必须通过下标
					语法：
						for(元素数据类型 变量名 : 数组名){
							变量名//就是每一次获取到的元素
						}
						
				数组遍历使用选择：
					如果要操作某一个具体的元素的时候，用普通for循环，因为操作元素需要通过下标
					其他只是遍历的话，用增强for循环 foreach	
			
		3.5 数组中专业术语：
			1.下标、索引、角标都是同一回事:从0 开始到 长度-1
				即：	第1个元素下标是0
				第2个元素下标是1
				最后一个元素下标是：长度-1
				
			2. 元素：就是数组中装的数据
			3. 长度：就是数组可以装的数据多少个是int类型
				获取数组长度的方式： 数组名.length	
			
	4. 数组注意事项：
		4.1 数组的下标范围是[0,arr.length-1],超过下标范围会报错
			ArrayIndexOutOfBoundsException 数组下标越界异常
		
		4.2 数组动态创建可以分为两步：
			1. int[] arr;//只是声明一个int类型的数组，还没有创建（即，还没有分配内存空间）
			2. arr = new int[长度];//分配内存空间，动态创建数组
			
		4.3 数组静态创建可以分为两步：
			1. int[] arr;//只是声明一个int类型的数组，还没有创建（即，还没有分配内存空间）
			2. arr = new int[]{1,2,43};//分配内存空间，动态创建数组
			不能直接这样写：
				arr = {1,2,43};//语法错误
		
		4.4 数组一旦创建，长度就固定不变了。
			如果长度不够或者长度多了，就需要创建新数组，将原来数组中元素复制到新数组中。	
			 int[] arr = {1,2,43};
			 arr = new int[]{1,43};//开辟新的内存区域，重新创建新的数组
			
		4.5 数组是引用数据类型,直接打印数组名是打印的地址
		4.6 动态创建，没有给数组元素赋值，则系统会分配默认值
			（byte/short/int/long）整数类型默认值：0
			(float、double)小数类型默认值：0.0
			boolean类型:false
			char类型默认值：空字符
		
		4.7 空指针异常：NullPointerException
		4.8 数组声明可以这样，但是不建议
			int arr[] = new int[2];// []在数组名后，不建议
		
	5. 数组遍历：
		1. 普通for循环,根据下标获取每一个元素，可以根据下标操作某一个元素
			例如：
			//因为知道数组长度length，所以用for循环，因为数组元素是通过通过下标获取的，下标是从0开始，所以，循环初始化条件是0
			for (int i = 0; i < arr.length; i++) {
				//通过下标获取每一个元素
				System.out.println(arr[i]);//打印每次循环i对应的元素
			}	
			
		2. 增强for循环: foreach
			语法：
				for(元素数据类型 变量名 : 数组名){
					变量名//就是每一次获取到的元素
				}
				
		数组遍历使用选择：
			如果要操作某一个具体的元素的时候，用普通for循环，因为操作元素需要通过下标
			其他只是遍历的话，用增强for循环 foreach		
				
	6. 扩展（内存图）
		基本类型具体的值在栈帧中	
		引用类型具体的值在堆中	
		
2. 方法(Method JDK中有这个类)
	1.1 概念：方法就是一个功能，可以被反复调用
	1.2 作用：复用代码，提高效率和程序的可读性。
	1.3 方法相关术语：(了解)
		1.3.1 修饰符：
				作用，决定方法的调用方式。例如，是用类名调用，还是用对象名调用
		
		1.3.2 返回值类型：就是返回值的数据类型   最近今天会直接告诉大家，需要不需要返回值
				作用：决定在调用方法的时候，是否可以用一个变量接收方法的结果值。
					如果返回值类型是void，表示没有任何返回值，不能用变量接收结果值。
				
				返回值：就是处理完业务后的结果反馈。通过关键字 return 返回数据
				
				返回值类型分类：
					基本类型：byte/short/int/long/float/double/boolean/char
		    
					引用类型：类、抽象类、接口、枚举、数组
					
					void : 表示没有任何返回值
			
		1.3.3 方法名： 
				作用：决定调用哪一个方法（就是用来找到要使用的方法的）
			  	命名原则：见名知意，小驼峰，不能以关键字命名。
		
		1.3.4 形参列表： 
				作用，就是用了接收调用方法的时候，传入的实际参数（值/变量）的
	
		1.3.5 方法体：
				就是根据实际需求，处理数据的代码
		 
		1.3.6 方法签名： 同一个类中，只能有一个独一无二的方法签名
		
				方法名+形参列表（参数的顺序、类型和个数）,跟形参名字无关
				
		1.3.7 形参列表3要素：（方法小括号中的）
			参数的顺序、类型和个数
	
************************ 1.4 方法使用：（最重要）*****************************************************
		1.4.1 方法的声明（定义）：（最重要）
			1.4.1.1. 复制main方法到当前类中，跟main方法平级的地方
				
			1.4.1.2. 根据需求分析方法的四要素：
					1. 返回值类型：
					2. 方法名：
					3. 形参列表：
					4. 方法体：
			
			1.4.1.3. 根据实际需求，修改方法的四要素
		
		1.4.2 方法的调用：（最重要）
			看要调用方法是否有static修饰：
				1.4.2.1 有static修饰，用：当前类名.方法名(实参(变量/值)); 
				1.4.2.2 没有static修饰，用：当前类的对象名.方法名(实参(变量/值)); //这几天都不用
				
				特殊情况：
					如果调用方（目前就是指main方法）和被调用方都在同一个类中，且都有或者都没有static修饰，可以简写为：
					方法名(实参(变量/值));		
					
				注意：调用方法的时候，传入的参数数量、数据类型、顺序必须和 声明方法的一致
************************************************************************************************
	1.5 方法重载overload：【掌握】
		1.5.1 概念：在同一个类中，方法名相同，形参列表不同，就是方法重载
		1.5.1 作用：
				1. 可以减少命名冲突
				2. 可以减少程序员记忆成本，方便解决了一类问题
				
		1.5.1 使用：
			声明方法的时候，写不同的形参即可。
			调用方法的时候，程序会根据参数数量、类型、顺序自动匹配调用的
		
	1.6 方法注意事项：【了解】  
		1.6.1 方法调用的时候，实参(变量/值) 必须和 形参完全一致
		1.6.2 一个类中，只能有一个方法签名
		1.6.3 返回值类型是void，不能用变量接受，不能放在打印语句中
		1.6.4 返回值不是void，必须return一个数据，并且数据类型和返回值类型完全一致
		1.6.5 return的数据，如果在if或者循环语句中，必须保证在条件语句和循环语句不成立的情况下，也有数据的返回
		
		