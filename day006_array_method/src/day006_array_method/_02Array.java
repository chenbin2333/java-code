package day006_array_method;

/**
 *	1. 数组：
	1. 概念：就是一堆盒子，同一时间，可以保存多个 相同 数据类型的数据
	2. 作用：可以解决同时保存多个数据的问题
	3. 使用：		
		3.1 数组声明：
			1. 动态创建：
				语法：数据类型[] 数组名 = new 数据类型[长度];//长度不能为负数，且是int类型 最大就是int最大值2147483647
				
			2. 静态创建：
				语法：数据类型[] 数组名 = {值1, 值2, 值3.....};//最常用
				
				
				语法：数据类型[] 数组名 = new 数据类型[]{值1,值2,值3.....};//不常用。了解即可
				
			怎么选择用动态创建还是静态创建？
				根据实际情况确定，知道具体的数据，用静态创建，不知道用动态创建
				
		3.2 数组赋值：
			语法：
				下标、索引、角标都是同一回事
				数组名[下标] = 值;
		
		3.3 数组取值：
			语法：
				数组名[下标];
				取出来：1. 打印输出 2.比较大小 3.计算 4.赋值给其他变量 5.作为方法的参数使用
				
		3.4 数组遍历：
			遍历：就是将数组中每一个元素取出来
				方式1：
					普通for循环	可以将数组元素重新赋值
					
				方式2： 简化遍历数组的过程
				 * 2. 增强for循环: foreach		不能将数组元素重新赋值，因为赋值必须通过下标
					语法：
						for(元素数据类型 变量名 : 数组名){
							变量名//就是每一次获取到的元素
						}
						
				数组遍历使用选择：
					如果要操作某一个具体的元素的时候，用普通for循环，因为操作元素需要通过下标
					其他只是遍历的话，用增强for循环 foreach	
			
		3.5 数组中专业术语：
			1.下标、索引、角标都是同一回事:从0 开始到 长度-1
				即：	第1个元素下标是0
				第2个元素下标是1
				最后一个元素下标是：长度-1
				
			2. 元素：就是数组中装的数据
			3. 长度：就是数组可以装的数据多少个是int类型
				获取数组长度的方式： 数组名.length	
			
 */
public class _02Array {

	public static void main(String[] args) {
		// 1. 声明数组
		// 1.1 静态态创建, 语法：数据类型[] 数组名 = {值1, 值2, 值3.....};//最常用
		int[] arr = {6, 9, 69};// 静态声明一个int类型数组，命名arr，赋值：{6, 9, 69}
		
		// 2. 数组取值，语法：数组名[下标] （取出来：1. 打印输出 2.比较大小 3.计算 4.赋值给其他变量 5.作为方法的参数使用）
		System.out.println("第1个元素：" + arr[0]);// 打印数组arr第1个元素
		System.out.println("第2个元素：" + arr[1]);// 打印数组arr第2个元素
		System.out.println("第3个元素：" + arr[2]);// 打印数组arr第3个元素
		
		// 3. 打印当前数组的长度：数组名.length
		System.out.println("数组arr长度：" + arr.length);
		
		// 4. 遍历整个数组arr【将所有元素都取出来】普通for循环
//		for (int index = 0; index < arr.length; index++) {// 下标index从开始，到arr.length-1结束
//			// index【每一个数组中的下标】
//			System.out.println("下标：" + index);
//			System.out.println("下标" + index + "的元素：" + arr[index]);
//		}
		
		// 5. 遍历整个数组arr【将所有元素都取出来】普通for循环
		/* 
		 * 方式2： 简化遍历数组的过程
		 * 2. 增强for循环: foreach		不能将数组元素重新赋值，因为赋值必须通过下标
			语法：
				for(元素数据类型 变量名 : 数组名){
					变量名//就是每一次获取到的元素
				}
		 */
		for (int e : arr) {// e是变量名，表示每次获取的元素，它只能获取全部的元素。
			System.out.println("元素：" + e);
			e = 1;
		}
		
	}

}
