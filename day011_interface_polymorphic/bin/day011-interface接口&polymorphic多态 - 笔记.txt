day011-interface接口&polymorphic多态 - 笔记

面向对象三【四】大特征：继承、封装、多态、抽象

6. Object类中的方法（重点、难点）
	1. int hashCode() 返回对象的哈希码值。  作用在数据结构的时候讲
 
 	2. String toString() 返回对象的字符串表示形式。如果需要打印对象的指定格式，
 		则需要重写当前对象所对应类的toString方法即可。
 		例如：打印Student对象为指定格式，则要重写 Student类的toString方法
 		
 	3. boolean equals(Object obj) 根据实际业务，判断两个对象成员变量的值是否相等，
				不是直接判断==【就是比较成员变量的值是否相等】
	 		判断当前对象和obj参数成员变量的值是否相等
	 		以后比较引用类型调用equals方法比较
	 		
	 		通过快捷键：alt + shift + s 选择hashCode和equals生成选项，在弹出的窗口中，勾选比较的成员变量OK即可
 		例如：
 			两个学生Student对象，我们认为姓名和电话号码相同就是同一个人，就用重写Student学生类的equals方法
 			两个教师Teacher对象，我们认为身份证号相同就是同一个人，就用重写Teacher教师类的equals方法
 			    
 	4. Class getClass() 即当前对象所对应的字节码文件   （反射最常用）
	 		字节码文件用==比较（了解）
	 		 Class类是 字节码文件类型 
	 		 例如： 
	 		 	user对象调用getClass()获取的是user对象的字节码文件 User类



1. 接口interface（重点）
	1 概念：是一种新结构，跟类平级。是一种标准，只要达到标准就具有这个接口的功能。
		是一些抽象方法的集合。
	
	2 作用：提高程序的扩展性。因为在java中是单继承，而 多实现（接口）
	3 语法：（重点）
		声明接口语法：
			public interface I接口名 {// 名字不是阿里规范，只是建议写法
		 		全局常量;// 默认都会有一个public static final修饰成员变量，建议简写	// 调用方式：只能是通过: 接口名.常量名;
					【必须是声明的同时接着赋值】 	命名：全大写用_隔开：MAX_VALUE					
		 		抽象方法;// 前面会有默认的public abstract修饰，建议简写
		 
		 		// 从jdk1.8开始有的
		 		public default 返回值类型 方法名(...){  // 调用方式：只能是通过  实现类对象.方法名(...);
		 			
		 		}
				// 从jdk1.8开始有的
		 		public static 返回值类型 方法名(...){  // 调用方式：只能是通过: 接口名.方法名(...);
		 
		 		}
		 	}
		 	
		 接口要使用，必须有实现类【子类】：
		 语法：
		 	public(abstract) class 接口名Impl implements 接口名1, 接口2...{
		 		如果是一个非抽象的类必须重写全部的抽象方法
		 	}
	 
	4 注意事项 （重点）
		1. 接口命名规则：IXxx【I接口名：不是阿里巴巴规范要求，只是建议的写法】
 		2. 接口实现类命名规则：接口名Impl【接口名Impl：不是阿里巴巴规范要求，只是建议的写法】
 			只实现一个接口，就是用 上面建议的命名，如果实现多个接口，根据实际业务需求命名
 			
		3. 接口中没有构造方法,也不能new对象
 		4. 如果接口中只有一个抽象方法，该接口就是函数式接口，函数式接口可以用@FunctionalInterface
 		 注解修饰，函数式接口可以使用jdk8新特性lambda表达式。
 		 
		5. 只要一个接口中只有一个抽象方法，不管有没有@FunctionalInterface，该接口都是函数式接口。
		6. 接口必须被子类通过implements全部实现其内的抽象方法
		
	5  类、接口关系
		类和类：单继承
		类和接口：多实现
		接口和接口：多继承extends
		
		当即需要继承一个类，又需要实现一些接口的时候，亲爹在前，干爹在后。
		
		语法：
			public (abstract) class (Abstract)Father {}
			public interface A {}
			public interface B extends A {}
			public interface C {}
			public interface D extends B, C {}// 接口和接口：多继承
			
			public class Son extends Father implements B, C, D {
				//必须重写全部的抽象方法
			}
			
	6 接口的使用场景：（重点）
		能用接口就不要用抽象类，因为java中都是单继承多实现的。	一般的特殊（扩展、额外）功能接口。
		一般抽象类是作为业务基类使用，接口是作为扩展功能使用
		都是用接口完成的（通过Employee工厂案例掌握）
		
2. 多态(polymorphic)(重点)
	1. 概念：就是创建对象的时候用父类变量装子类对象【向上造型】
			当父类变量调用方法的时候，如果子类重写了方法，则会执行对应子类重写后的方法。
			官方说法:当编译时类型和运行时类型不一致的时候，就产生了多态。
	2. 作用：
			1. 提高的程序开发的扩展性和灵活性。
			2. 让代码更简洁，更健壮。
-----------------------3. 使用：（最重要）-------------------------------
3. 使用：（最重要）
		3.1 向上造型
		语法：
			父类类型 对象名 = new 子类类型(...);// 向上造型【只能调用父类中声明的方法，不能调用子类特有方法】
			对象名.方法();// 如果子类重写了方法，则会执行对应子类重写后的方法
			多态调用的方法，但是父类中有的方法，不能调用子类特有方法
			【这里主要是看对象中装的是哪一个子类，装的是哪一个就执行这一个重写后的】
		
			如果调用子类特有方法，就必须要向下造型，向下造型前，必须进行类型判断
			
		3.2 向下造型 => 就是强制类型转换
			强制类型转换语法：
				子类类型 变量 = (子类类型)父类变量/父类类型值;
			
			因为不能确定父类变量中装的是哪一个子类对象，所以应该先进行类型判断，
		 	在确定对应的类型后，再进行强制转换：
		 	
		 	类型判断语法1 ：
		 		if(父类变量名 instanceof 子类类型1){
		 			// 强制转换
		 			子类类型1 变量 = (子类类型1)父类变量/父类类型值;
		 			
		 			// 调用子类特有方法
		 			子类变量.特有方法(...);
		 		} else if(父类变量名 instanceof 子类类型2){
		 			// 强制转换
		 			子类类型2 变量 = (子类类型2)父类变量/父类类型值;
		 			// 调用子类特有方法
		 			子类变量.特有方法(...);
		 		}...
		
		 	类型判断语法2 ：
		 		if(父类变量名.getClass() == 子类类型1.class){
		 			// 强制转换
		 			子类类型1 变量 = (子类类型1)父类变量/父类类型值;
		 			
		 			// 调用子类特有方法
		 			子类变量.特有方法(...);
		 		} else if(父类变量名.getClass() == 子类类型2.class){
		 			// 强制转换
		 			子类类型2 变量 = (子类类型2)父类变量/父类类型值;
		 			
		 			// 调用子类特有方法
		 			子类变量.特有方法(...);
		 		}...
		
-------------------------------------------------------------------
	
	4. 注意事项：调用看左边，运行看右边
		4.1. 成员变量没有多态
		
		4.2. 多态不能调用子类特有的方法，如果需要调用子类特有的方法，
			必须进行强制类型转换（向下造型/向下转型），
			向下造型需要进行子类类型判断，否则，
			会报错：ClassCastException 类造型异常
			
	  	4.3. 父类变量能点（调用）出哪些成员（成员变量和方法），
	  	是由当前类和其父类决定,优先从当前类开始查找，
	  	直到找到Object了为止，如果Object中有没有，就不能调用
	  	
	 	4.4. 多态调用方法的优先级顺序为：（难度大，扩展）
		该优先级为：this.show(O)、super.show(O)、
		this.show((super)O)、super.show((super)O)。
	
		
		
		
		
		