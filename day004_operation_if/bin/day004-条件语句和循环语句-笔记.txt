day004-条件语句和循环语句-笔记

1. 赋值运算（Assignment Operation）：（掌握）是优先级最低的一种运算，等后边的所有运算完毕后，才执行赋值运算
		+= 累加
		-= 累减
		*=
		/=
		%=
		=  
		以下这些符号也是赋值运算符，不重要
		...
		&=
		|=
		^=
		
		赋值运算有强制转换功能，可以避免类型提升.会有溢出风险
		例如：
			byte b = 127;
			
			b += 1; => b = (byte)(b+1);
			b = b + 1;
	
2. 比较运算(Compare Operation)：（掌握）结果一定是boolean类型,以后通常配合循环和条件语句使用
		>
		<
		>=
		<=
		
		==: 恒等于
			1. 比较基本类型，比较的是值是否相等
			例如： 
			int a = 1;
			int b = 1;
			System.out.println(a == b); //true
			
			2. 比较引用类型，比较的是地址是否相等【后面讲】
			
		!=: 不等于
			1. 比较基本类型，比较的是值是否不相等
			2. 比较引用类型，比较的是地址是否不相等
		
		instanceof:只能比较引用类型，一般配合条件语句使用(面向对象重点讲，今天不管)
			表示判断一个变量或者值是否属于某一个引用数据类型
			语法：
				值/变量 instanceof 引用数据类型
			例如：
				1.System.out.println("约" instanceof String); 
				
				2.String str = "不约";
				System.out.println(str instanceof String); 
	
3. 三目(三元)运算(Binocular Operation)：表示如果x为true，执行y，否则，执行z
		语法： x ? y : z;
		x:是boolean类型值或者boolean表达式。
		y、z:可以是表达式，也可以是值或者变量
		
		如果要接收三目运算的结果，必须要求y和z的类型完全一致
		三目运算可以嵌套使用
		
		例如：
			求两个数中的最大值或者最小值
			int a = 1;
			int b = 2;
			int max = a > b ? a : b;
			
			嵌套使用：(看不懂就用单层的)
			int a = 1;
			int b = 2;
			int c = 3;
			int max = a > b ? (a > c ? a : c) : (b > c ? b : c);
		
4. 逻辑运算（Logical Operation）（掌握）逻辑运算两边必须是布尔类型的值或者是表达式
		!: 表示取反，非真即假，非假即真 (操作一个变量/值)
		
		&&:逻辑双与，表示并且，有假即假，有短路功能，没有位运算功能
		
		&:逻辑单与，表示并且，有假即假，没有短路功能，有位运算功能
		
		||:逻辑双或，表示或者，有真即真，有短路功能，没有位运算功能
		
		|:逻辑单或，表示或者，有真即真，没有短路功能，有位运算功能
		
		^:逻辑异或， 同假异真
		
		短路问题：当逻辑运算左边能够确定整个表达式结果值的时候，就会发生短路，不会再计算后面的
		结果了，这样可以提供程序运算效率
		
		例如：
			&&当左边为false时，右边的就短路了
			||当左边为true时，右边的就短路了
			
		以后，逻辑运算都用 && 或者 ||
		
		优先级问题：
			! > &&(&) > ||(|)
			验证：
				true || true && false 
				如果是true，&&优先级高
				如果是false，||优先级高或者相等
	
5. 位运算（了解）不用管
		~n:	按位取反
			记住公式：n的按位取反结果是： -(n+1)
			
		&: 按位与，有0即0
			3&5 = 1
			0011  => 3
			0101  => 5
			----&
			0001  => 1
		
		|:按位或，有1即1
			3|5 = 7
			0011  => 3
			0101  => 5
			----|
			0111  => 7
		
		^:按位异或，同0异1		常常用来交换两个变量的值
			3^5 = 6
			0011  => 3
			0101  => 5
			----^
			0110  => 6
			
		m << n: 按位左位移，右边补0  相当于*2^n 次方，有溢出风险
			3<<2 = 12	*2^2
			0011  => 3
			---- <<
			1100  => 12		
		
		m >> n: 按位右位移，如果m是正数，左边补0，是负数就补1  相当于/2^n 次方
			3>>2 = 0	/2^2
			0011  => 3
			---- <<
			0000  => 0		
			
		m >>> n: 无符号右位移，不管m是正数还是负数，左边永远补0，这样的话，负数移动后就变成了正数，失去了数学意义
		



流程控制语句：
	1. 顺序：程序的执行时从左到右，从上到下
	
	2. 条件（选择）: 让程序有选择的执行，满足条件就执行，不满足就不执行
		
	3. 循环：重复的干一件事
		1. 条件循环：满足条件就干，不满足就不干了
		2. 死循环：永远不停的干事
	
1. 选择结构：（掌握）
	作用：让程序有选择的执行，满足条件就执行，不满足就不执行
	1.1. 单条件语句:（掌握）
		语法：
			if(条件判断){//布尔表达式、比较表达式、逻辑
				如果满足条件，就执行该{}中代码
			}
			
	1.2. 双条件语句（掌握）
		语法：
			if(条件判断){
				如果满足条件，就执行该if中代码
			} else {
				如果满足不条件，就执行该else中代码
			}
			
	1.3. 多条件语句（掌握）
		语法：
			if(条件判断1){
				如果满足条件1，就执行该代码
			} else if(条件判断2){
				如果满足条件2，就执行该代码
			} else if(条件判断3){
				如果满足条件3，就执行该代码
			}...
			else {
				如果上面所有的条件都不满足，则只需else中代码
			}
			
	1.4. switch（掌握）
		语法：
			声明变量
			switch(变量){
				case 值1:
					功能语句1
					功能语句2...
					break;
				case 值2:
					功能语句1
					功能语句2...
					break;
				case 值3:
					功能语句1
					功能语句2...
					break;
				
				default:
					default语句
					break;
			}
			switch语句优先从case开始匹配，只有case都没有匹配上才匹配default语句
			如果匹配上一个case，则会找最近的break，如果没有，则会一直向下执行，就不会
			匹配了，直到找到break或者到switch语句结束为止
			
			switch支持的数据类型：
				byte/ short / int / char / String（1.7） / 枚举类型（1.5）
				
			使用场景：
				switch不适应区间条件，只适用于一些条件比较固定的场景。例如：vip、星座、QQ状态、月份
				礼拜、生肖、季节...
				
	1.5. 使用场景：
		只有比较固定的情况下，使用switch结构，其他情况一律用if语句
			
	1.6. 选择结构注意事项：（了解）
		1. 选择结构是从上到下开始匹配，一旦匹配上一个条件后，整个条件语句就结束了，
			哪怕后面也能匹配上条件也不会执行了
			
		2. if 和 if else 语句，后面可以不写{},但是不建议
			因为不写{} ,只能控制一行代码
			
		3. if(){} else if(){}后可以不写 else，一般根据业务需求决定
	
2. 循环结构：（掌握）
		概念：就是重复的干一件事
		1. 循环结构，就是重复的干一件事，可以复用代码
		2. 分类：
			条件循环
			死循环【很少使用】
			
		2.1. 先判断，满足条件再干	（掌握）
			while(条件判断){
				循环体（重复干的事）
			}
			
			/*
			 * while执行流程：
			 * 	第1次：1. 初始化条件语句 => 2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第2次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第3次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	...
			 *	最后1次： 2.条件判断语句 
			 */
			
		2.2. 先干一次，再判断，满足条件再干	预执行一次	（掌握）
			do{
				循环体（重复干的事）
			}while(条件判断);//注意分号
			
			/*
			 * do while执行流程：
			 * 	第1次：1. 初始化条件语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第2次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	第3次：2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
			 * 	...
			 *	最后1次： 2.条件判断语句 
			 */
			例如：
				扫雷、获取连接数据库、远程控制、坦克大战、打飞机游戏
			
		2.3 for循环，可以简单的认为就是while循环的简写	（重点）
			for(1.初始化条件语句;	2.条件判断语句;	4. 循环控制语句){
				3. 循环体
			}
			
			执行流程：（重点）
				第1次：1. 初始化条件语句 => 2.条件判断语句 => 3. 循环体 => 4. 循环控制语句
		 		第2次：2. 条件判断语句 => 3. 循环体 => 4. 循环控制语句
		  		第3次：2. 条件判断语句 => 3. 循环体 => 4. 循环控制语句
		  		...
		 		最后1次： 2.条件判断语句 
				
		2.4 循环注意事项测试：（了解）
			1. while(false){}语法错误
			2. 死循环后面不能紧跟任何代码
				while(true){}
				for(){}
			
			3. while(条件判断);可以不写循环体
			4. for循环
				4.1 for(){}中的条件都可以拿到外部，且可以不写{}
				4.2 for(){}死循环是第二个条件判断不写，就是死循环
				4.3 for(); 可以不写循环体
			
		2.5 使用场景：	（掌握）
			不知道循环次数一般用 while，知道循环次数一般用 for，需要预执行一次的用do{}while();
			
			例如：获取连接数据库、远程控制、坦克大战、打飞机游戏
			
			
		2.6 循环控制语句：（掌握）
				1. break 表示结束当前层循环	（锚点的自己扩展，几乎不用）
				2. continue 表示跳过当前次循环，继续下一次循环
				3. return 表示结束的当前方法
			在以上三个控制语句后，不能紧跟任何代码，因为永远执行不到
			
		2.7 双层for循环，其实，本质外层循环的循环体  是另外一个循环而已	(了解)
			for(1.初始化条件;	2.条件判断;	3. 循环控制语句){
				4. for(5.初始化条件;	6.条件判断;	7. 循环控制语句){
					8. 循环体
				}
			}
			
			执行流程：
				自己画图去研究
			
			总结的规律：（当成是轮子，可以直接使用）
				外层循环执行一次，内层循环执行所有次
				外层循环负责行数，内层负责每一行中列数
				尽量减少嵌套层级
					
			双层for练习
				1.打印九九乘法表	
		
	最核心的是掌握循环的流程（看笔记+画图）
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	